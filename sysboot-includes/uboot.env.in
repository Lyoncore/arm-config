arch=arm
baudrate=115200
board=dragonboard
board_name=dragonboard
bootcmd=echo Factory_Install ; run factory_install_boot
devtype=mmc
mmcreco=9
mmcpart=8
mmcdev=1
bootfile=dragonboard/linux.itb
bootdelay=2
cpu=armv8
dl_kernel=tftp $linux_addr $linux_image && tftp $fdt_addr $fdt_image
dl_ramdisk=tftp $ramdisk_addr $ramdisk_image
dl_uboot=tftp $loadaddr dragonboard/u-boot.img
fdt_addr=0x83000000
fdt_high=0xffffffffffffffff
fdt_image=dragonboard/apq8016-sbc.dtb
fdtfile=apq8016-sbc.dtb
filesize=7a00eb
getargs=fdt addr 0x81e00000; fdt get value args /chosen bootargs
initrd_file=initrd.img
initrd_high=0xffffffffffffffff
initrd_size=7a00eb
ipaddr=10.0.0.2
kernel_file=kernel.img
linux_addr=0x81000000
linux_image=dragonboard/Image
loadaddr=0x81000000
loadfdt=fatload mmc 1:8 ${fdt_addr} ${snap_kernel}/dtbs/${fdtfile}
loadfiles=run getargs; run loadkernel; run loadfdt; run loadinitrd
loadinitrd=fatload mmc 1:8 ${ramdisk_addr} ${snap_kernel}/${initrd_file}; setenv initrd_size ${filesize}
loadkernel=fatload mmc 1:8 ${linux_addr} ${snap_kernel}/${kernel_file}
mmcargs=setenv bootargs "${args} console=ttyMSM0,115200n8 root=${mmcroot}"
nboot_nord=usb start && run dl_kernel && usb stop && booti $linux_addr - $fdt_addr
nboot_rd=usb start && run dl_kernel && run dl_ramdisk && booti $linux_addr $ramdisk_addr $fdt_addr
netmask=255.255.255.0
ramdisk_addr=0x84000000
ramdisk_image=dragonboard/initrd.img
reflash=mmc dev 0 &&usb start &&tftp $loadaddr dragonboard/rescue/gpt_both0.bin && mmc write $loadaddr 0 43 &&mmc rescan &&part start mmc 0 1 start && part size mmc 0 1 size && tftp $loadaddr dragonboard/rescue/NON-HLOS.bin &&mmc write $loadaddr $start $size &&part start mmc 0 2 start && part size mmc 0 2 size && tftp $loadaddr dragonboard/rescue/sbl1.mbn &&mmc write $loadaddr $start $size &&part start mmc 0 3 start && part size mmc 0 3 size && tftp $loadaddr dragonboard/rescue/rpm.mbn &&mmc write $loadaddr $start $size &&part start mmc 0 4 start && part size mmc 0 4 size && tftp $loadaddr dragonboard/rescue/tz.mbn &&mmc write $loadaddr $start $size &&part start mmc 0 5 start && part size mmc 0 5 size && tftp $loadaddr dragonboard/rescue/hyp.mbn &&mmc write $loadaddr $start $size &&part start mmc 0 6 start && part size mmc 0 6 size && tftp $loadaddr dragonboard/rescue/sec.dat &&mmc write $loadaddr $start $size &&part start mmc 0 7 start && part size mmc 0 7 size && tftp $loadaddr dragonboard/rescue/emmc_appsboot.mbn &&mmc write $loadaddr $start $size &&part start mmc 0 8 start && part size mmc 0 8 size && tftp $loadaddr dragonboard/u-boot.img &&mmc write $loadaddr $start $size &&usb stop &&echo Reflash completed
reflash_uboot=mmc dev 0 &&usb start &&part start mmc 0 8 start && setenv size 0x800  &&tftp $loadaddr dragonboard/u-boot.img &&mmc write $loadaddr $start $size &&usb stop &&echo Reflash completed &&reset
rootpath=/home/nfs/dragonboard
serverip=10.0.0.1
snappy_boot=if test "${snap_mode}" = "try"; then setenv snap_mode "trying"; saveenv; if test "${snap_try_core}" != ""; then setenv snap_core "${snap_try_core}"; fi; if test "${snap_try_kernel}" != ""; then setenv snap_kernel "${snap_try_kernel}"; fi; elif test "${snap_mode}" = "trying"; then setenv snap_mode ""; saveenv; elif test "${snap_mode}" = "recovery"; then echo RECOVERY; run factory_restore_boot; fi; run loadfiles; setenv mmcroot "/dev/disk/by-label/writable ${recov_label} ${snappy_cmdline} snap_core=${snap_core} snap_kernel=${snap_kernel}"; run mmcargs; booti ${linux_addr} ${ramdisk_addr}:${initrd_size} ${fdt_addr}
recovery_snap_kernel=
recovery_snap_core=
snappy_cmdline=net.ifnames=0 init=/lib/systemd/systemd ro panic=-1 fixrtc
snap_mode=
loadfdt_fi=fatload mmc ${mmcdev}:${mmcreco} ${fdt_addr} dtbs/${fdtfile}
loadinitrd_fi=fatload mmc ${mmcdev}:${mmcreco} ${ramdisk_addr} ${initrd_file}; setenv initrd_size ${filesize}
loadkernel_fi=fatload mmc ${mmcdev}:${mmcreco} ${loadaddr} ${kernel_file}
loadfiles_fi=run getargs; run loadkernel_fi; run loadfdt_fi; run loadinitrd_fi
factory_install_boot=run loadfiles_fi; setenv mmcroot "/dev/disk/by-label/writable ${recov_label} ${snappy_cmdline} snap_core=${recovery_snap_core} snap_kernel=${recovery_snap_kernel} recoverytype=factory_install cloud-init=disabled"; run mmcargs; booti ${linux_addr} ${ramdisk_addr}:${initrd_size} ${fdt_addr}
factory_restore_boot=run loadfiles_fi; setenv mmcroot "/dev/disk/by-label/writable ${recov_label} ${snappy_cmdline} snap_core=${recovery_snap_core} snap_kernel=${recovery_snap_kernel} recoverytype=factory_restore"; run mmcargs; booti ${linux_addr} ${ramdisk_addr}:${initrd_size} ${fdt_addr};
soc=apq8016
stderr=serial
stdin=serial
stdout=serial
test=run test_mmc && run test_sd && run test_sdm && run test_network && reset
test_mmc=mmc dev 0 && mmc erase 71020 1 && mmc write 0xBD956000 71020 1&& mmc read $fdt_addr 71020 1 && cmp.b 0xBD956000 $fdt_addr 200
test_network=usb start && dhcp; usb stop
test_sd=mmc dev 1 && mmc erase 61460 1 && mmc write 0xBD956000 61460 1&& mmc read $fdt_addr 61460 1 && cmp.b 0xBD956000 $fdt_addr 200
test_sdm=mmc dev 1 && mmc erase 61460 8 && mmc write 0xBD956000 61460 8&& mmc read $fdt_addr 61460 8 && cmp.b 0xBD956000 $fdt_addr 1000
time_mmc=mmc dev 0; timer start; mmc read $loadaddr 0 5000; timer get
time_sd=mmc dev 1; timer start; mmc read $loadaddr 0 5000; timer get
vendor=qcom
